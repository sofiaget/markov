import numpy as np
import matplotlib.pyplot as plt
from numpy.linalg import matrix_power

# Matriz de transição de um passo
P = np.array([
    [0, 1/2, 1/2, 0, 0, 0],   # de 0 para 1 ou 2
    [1/2, 0, 0, 1/2, 0, 0],   # de 1 para 0 ou 3
    [1/3, 0, 0, 1/3, 1/3, 0], # de 2 para 0, 3 ou 4
    [0, 1/3, 1/3, 0, 0, 1/3], # de 3 para 1, 2 ou 5
    [0, 0, 1/2, 0, 0, 1/2],   # de 4 para 2 ou 5
    [0, 0, 0, 0, 0, 1]        # de 5 permanece em 5 (absorvente)
])

# Estado inicial
x0 = np.array([1, 0, 0, 0, 0, 0])

# c) Probabilidade do rato estar na sala 5 após 3 horas

n = 100000  # número de simulações
chain2 = np.zeros(n, int)  # vetor para armazenar os estados no passo escolhido
passo = 3

for j in range(n):
    r1 = np.random.uniform(0, 1)
    acumulada = np.cumsum(x0)
    valor_inicial = np.argmax(acumulada > r1)
    chain_length = 20  # número de transições na cadeia, deve ser maior que o passo escolhido
    chain = np.zeros(chain_length, int)
    chain[0] = valor_inicial

    for i in range(1, chain_length):
        Linha_atual = P[chain[i-1]]
        acumulada = np.cumsum(Linha_atual)
        r = np.random.uniform(0, 1)
        chain[i] = np.argmax(acumulada > r)

    chain2[j] = chain[passo]

# cálculo de estatísticas por Monte Carlo
prob1 = np.sum(chain2 == 5) / n
print("Probabilidade do rato estar na sala 5 após 3 horas:", prob1)

# d) Número médio de passos para a absorção

passo = 38
chain2 = np.zeros(n, int)

for j in range(n):
    r1 = np.random.uniform(0, 1)
    acumulada = np.cumsum(x0)
    valor_inicial = np.argmax(acumulada > r1)
    chain_length = 40  # número de transições na cadeia, deve ser maior que o passo escolhido
    chain = np.zeros(chain_length, int)
    chain[0] = valor_inicial

    for i in range(1, chain_length):
        Linha_atual = P[chain[i-1]]
        acumulada = np.cumsum(Linha_atual)
        r = np.random.uniform(0, 1)
        chain[i] = np.argmax(acumulada > r)
        if chain[i] == 5:
            chain2[j] = i
            break

# cálculo do número médio de passos até a absorção
average_steps = np.mean(chain2[chain2 > 0])
print("Número médio de passos para a absorção:", average_steps)

# Probabilidade de estar na sala 5 em função do número de passos
x1 = np.zeros((passo))

for i in range(passo):
    xn = np.dot(x0, matrix_power(P, i))
    x1[i] = xn[5]

x1 = np.append(x0[5], x1)
i = np.arange(0, passo+1)
plt.figure(1)
plt.plot(i, x1)
plt.title("Probabilidade do rato estar na sala 5 pelo número de horas")
plt.xlabel('Passos')
plt.ylabel('Probabilidade')
plt.grid()
plt.show()
